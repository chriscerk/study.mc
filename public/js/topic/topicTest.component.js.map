{"version":3,"sources":["topic/topicTest.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YA8EA;gBAcE,4BAAoB,KAAqB,EAAE,MAAc,EAAU,WAAwB;oBAAvE,UAAK,GAAL,KAAK,CAAgB;oBAA0B,gBAAW,GAAX,WAAW,CAAa;oBACvF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;oBACxB,IAAI,CAAC,UAAU,GAAG,mCAAmC,CAAC;oBACtD,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;oBACzB,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;oBAC1B,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;gBACjC,CAAC;gBAEF,qCAAQ,GAAR;oBAAA,iBAMC;oBALG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,MAAM;wBAClD,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;wBACvB,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC;6BACxB,SAAS,CAAC,UAAC,KAAa,IAAK,OAAA,KAAI,CAAC,KAAK,GAAG,KAAK,EAAlB,CAAkB,CAAC,CAAC;oBACxD,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,wCAAW,GAAX;oBACE,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;gBACzB,CAAC;gBAED,qCAAQ,GAAR;oBACE,IAAI,CAAC,UAAU,GAAG,mCAAmC,CAAC;oBACtD,IAAI,CAAC,eAAe,EAAE,CAAC;oBAEvB,EAAE,CAAA,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,CACvD,CAAC;wBACC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;oBAC/B,CAAC;gBACH,CAAC;gBAED,wCAAW,GAAX;oBACE,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;gBAC3B,CAAC;gBAED,0CAAa,GAAb;oBACE,IAAI,CAAC,UAAU,GAAG,mCAAmC,CAAC;oBACtD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;oBACxB,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAC1B,CAAC;gBAvHH;oBAAC,gBAAS,CAAC;wBACT,QAAQ,EAAE,YAAY;wBACtB,QAAQ,EAAE,ovEA8DX;qBACA,CAAC;;sCAAA;gBAwDF,yBAAC;YAAD,CAvDA,AAuDC,IAAA;YAvDD,mDAuDC,CAAA","file":"topic/topicTest.component.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\r\n\r\nimport { ITopic } from '../shared/interfaces';\r\nimport { MyPercentPipe } from '../shared/pipes/percent.pipe'\r\nimport { AlertBoxComponent } from '../shared/alertBox.component';\r\nimport { EndMessageComponent } from '../shared/endMessage.component';\r\n\r\nimport { DataService } from '../core/services/data.service';\r\n\r\n@Component({\r\n  selector: 'topic-test',\r\n  template: `\r\n<div *ngIf=\"topic\">\r\n  <h1><b>Test</b> your Knowledge on {{topic.name}}</h1>\r\n<div class=\"content\">\r\n  <end-message *ngIf=\"moduleIsComplete\" [topicName]=\"topic.name\" [incorrectAnswers]=\"incorrectAnswers\"></end-message>\r\n    <div *ngFor=\"let testItem of topic.testItems; let i = index\">\r\n      <div *ngIf=\"currentQuestion == i\">\r\n        <br>\r\n          <h2> {{i/topic.testItems.length | MyPercentPipe }} Complete</h2> \r\n        <br>\r\n\r\n        <form #f=\"ngForm\" (ngSubmit)=\"onSubmit()\" *ngIf=\"validAnswer\" method=\"post\">\r\n          <p class=\"test-question\">\r\n            {{testItem.question}}\r\n            <br>\r\n            <br>\r\n            <select class=\"form-control input-lg\" [(ngModel)]=\"userAnswer\" name=\"userAnswerInput\" required>\r\n              <option  value=\"\" selected=\"selected\" disabled=\"disabled\"></option>\r\n              <option *ngFor=\"let option of testItem.options;\">{{option}}</option>\r\n            </select>\r\n          </p>\r\n          <div class=\"action-buttons\">\r\n            <button type=\"submit\" \r\n                    class=\"btn btn-success btn-lg\" \r\n                    *ngIf=\"testItem.answer == userAnswer\">\r\n              Submit\r\n            </button>\r\n\r\n            <button type=\"button\" \r\n                    (click)=\"wrongAnswer()\"\r\n                    [disabled]=\"!f.form.valid\" \r\n                    class=\"btn btn-success btn-lg\" \r\n                    *ngIf=\"testItem.answer != userAnswer\">\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </form>\r\n\r\n         <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"!validAnswer\">\r\n            <a href=\"#\" class=\"alert-link\">Incorrect Answer!</a>\r\n         </div>\r\n\r\n         <div class=\"action-buttons\">\r\n          <button (click)=\"retryQuestion()\" class=\"btn btn-danger btn-lg\" *ngIf=\"!validAnswer\">Retry</button>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!topic.testItems.length\">\r\n        <div class=\"alert alert-info review-alert\" role=\"alert\">\r\n          <a href=\"#\" class=\"alert-link\"> There are currently no Test items for {{topic.name}}.</a>\r\n        </div>\r\n    </div>\r\n\r\n\r\n</div>\r\n<div *ngIf=\"!topic\" class=\"row\">\r\n  No topic found\r\n</div>\r\n</div>\r\n                \r\n`\r\n})\r\nexport class TopicTestComponent implements OnInit {\r\n\r\n  topic: ITopic;\r\n  private sub: Subscription;\r\n\r\n  router: Router;\r\n\r\n  userAnswer: string;\r\n  correctAnswer: string;\r\n  currentQuestion: number;\r\n  validAnswer: boolean;\r\n  incorrectAnswers: number;\r\n  moduleIsComplete: boolean;\r\n\r\n  constructor(private route: ActivatedRoute, router: Router, private dataService: DataService) {\r\n      this.router = router;\r\n      this.validAnswer = true;\r\n      this.userAnswer = \"Current Question Not Answered Yet\";\r\n      this.currentQuestion = 0;\r\n      this.incorrectAnswers = 0;\r\n      this.moduleIsComplete = false;\r\n   } \r\n\r\n  ngOnInit() {\r\n      this.sub = this.route.parent.params.subscribe(params => {\r\n        let id = +params['id'];\r\n        this.dataService.getTopic(id)\r\n            .subscribe((topic: ITopic) => this.topic = topic);\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n  }\r\n\r\n  onSubmit(){\r\n    this.userAnswer = \"Current Question Not Answered Yet\";\r\n    this.currentQuestion++;\r\n\r\n    if(this.topic.testItems.length == this.currentQuestion)\r\n    {\r\n      this.moduleIsComplete = true;\r\n    }\r\n  }\r\n\r\n  wrongAnswer(){\r\n    this.validAnswer = false;\r\n  }\r\n\r\n  retryQuestion(){\r\n    this.userAnswer = \"Current Question Not Answered Yet\";\r\n    this.validAnswer = true;\r\n    this.incorrectAnswers++;\r\n  }\r\n\r\n}"],"sourceRoot":"/source/"}